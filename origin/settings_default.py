from collections import defaultdict

# The game name
NAME = "origin"

# The interface used by the Server to run its webserver/SocketIO on.
SERVER_INTERFACE = "0.0.0.0"
# The port used by the server for its webserver.
SERVER_PORT = 8000

# The interface used by the portal for its listening ports.
PORTAL_INTERFACE = "0.0.0.0"
# The port that the portal will use for telnet.
PORTAL_TELNET = 7999

PORTAL_URL_TO_GAME = "http://127.0.0.1:8000"

# Classes that the server will use for various things.
SERVER_CLASSES = dict()
SERVER_CLASSES["core"] = "origin.server.core.Core"
SERVER_CLASSES["python_parser"] = "origin.server.repl.PythonParser"
SERVER_CLASSES["login_parser"] = "origin.server.login.LoginParser"
SERVER_CLASSES["main_menu_parser"] = "origin.server.main_menu.MainMenuParser"
SERVER_CLASSES["database"] = "origin.db.core.DatabaseManager"

PORTAL_CLASSES = dict()
PORTAL_CLASSES["core"] = "origin.portal.portal.Core"

PORTAL_SERVICES = {"telnet": "origin.portal.telnet.TelnetService"}

PORTAL_EVENT_HANDLER_MODULES = ["origin.portal.events"]

COLLECTION_MANAGERS = {
    "user": "origin.db.users.UserManager",
    "session": "origin.db.sessions.SessionManager",
}

# Do be sure to change these as needed.
ARANGO_URL = "http://127.0.0.1:8529"
ARANGO_DATABASE = "origin"
ARANGO_USERNAME = "origin"
ARANGO_PASSWORD = "origin"

AUTOPROXY_CLASSES = {
    "user": "origin.db.users.User",
    "session": "origin.db.sessions.Session",
}


OPTIONS_ACCOUNT_DEFAULT = {
    "border_style": ["Headers, footers, table borders, etc.", "Style", "magenta"],
    "header_style": [
        "Headers generated by Rich.",
        "Style",
        "bold",
    ],
    "timezone": ["Timezone for dates.", "Timezone", "UTC"],
    "screenreader": [
        "Minimize fancy formatting.",
        "Boolean",
        False,
    ],
}

# Modules holding Option classes, responsible for serializing the option and
# calling validator functions on it. Same-named functions in modules added
# later in this list will override those added earlier.
OPTION_CLASS_MODULES = ["origin.utils.optionclasses"]
# Module holding validator functions. These are used as a resource for
# validating options, but can also be used as input validators in general.
# Same-named functions in modules added later in this list will override those
# added earlier.
VALIDATOR_FUNC_MODULES = ["origin.utils.validatorfuncs"]

LOG_DIR = "logs"
